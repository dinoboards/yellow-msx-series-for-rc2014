
TOTAL_NUMBER_OF_SECTORS	EQU	((512-16)*1024)/512

SSL_REGS		EQU	$FFFF
PSL_STAT		EQU	$A8
MSX_MUSIC_PAGE		EQU	$E000
ROM_05555H		EQU	($5555)
ROM_02AAAH		EQU	($2AAA+$4000)

; Look for FAT HEADER on the 2nd page of the ROM (1st disk sector)
DETECT_MS:
	DI
	LD	L, 1
	CALL	MSX_MUSIC_SET_PAGE

	EXX
	CALL	MSX_MUSIC_SET_SLOT
	EXX

	LD	HL, 0
	LD	DE, MKFS_FAT_HEADER
	LD	B, 7

DETECT_MS_NEXT:
	LD	A, (DE)
	CP	(HL)
	JR	NZ, DETECT_MS_FAIL

	INC	HL
	INC	DE
	DJNZ	DETECT_MS_NEXT

DETECT_MS_FAIL:
	PUSH	AF

DETECT_MS_RESTORE:
	EXX
	CALL	MSX_MUSIC_RESTORE_SLOT

	LD	L, 0
	CALL	MSX_MUSIC_SET_PAGE
	EXX

	POP	AF
	RET	NZ

	PUSH	AF
	LD	HL, MSG.MUSIC_STORAGE
	CALL	PRINT
	POP	AF
	RET

MSG.MUSIC_STORAGE:
	DB	"MUSIC ROM:       (496KB"

MSG.STORAGE_LINE_END
	DB 	")"

MSG.NEWLINE
	DB	13, 10, 0


MKFS_FAT_HEADER:
	DB	0EBH, 03CH, 090H, 06DH, 06BH, 066H, 073H

LUN_INFO_MS:
	LD	A, B
	CP	1
	JR	NZ, LUN_INFO_MS_INVALID
	LD	A, 0			; STANDARD BLOCK DEVICE
	LD	(HL), 0
	INC	HL

	LD	(HL), 0			; SECTOR SIZE 512
	INC	HL
	LD	(HL), 2
	INC	HL

	LD	(HL), LOW TOTAL_NUMBER_OF_SECTORS
	INC	HL
	LD	(HL), HIGH TOTAL_NUMBER_OF_SECTORS
	INC	HL
	LD	(HL), 0
	INC	HL
	LD	(HL), 0
	INC	HL

	LD	(HL), 2			; READ ONLY
	INC	HL

	LD	(HL), 0			; CYCLINDERS
	INC	HL
	LD	(HL), 0
	INC	HL

	LD	(HL), 0			; HEADS
	INC	HL

	LD	(HL), 0			; SECTORS PER TRACK
	RET

LUN_INFO_MS_INVALID:
	LD	A, 1
	RET
	RET


;INPUT:    CY=0 TO READ, 1 TO WRITE
;          A = DEVICE NUMBER, 1 TO 7
;          B = NUMBER OF SECTORS TO READ OR WRITE
;          C = LOGICAL UNIT NUMBER, 1 TO 7
;          HL = SOURCE OR DESTINATION MEMORY ADDRESS FOR THE TRANSFER
;          DE = ADDRESS WHERE THE 4 BYTE SECTOR NUMBER IS STORED.
;Output:   A = Error code (the same codes of MSX-DOS are used):
;              0: Ok
;              .IDEVL: Invalid device or LUN
;              .NRDY: Not ready
;              .DISK: General unknown disk error
;              .DATA: CRC error when reading
;              .RNF: Sector not found
;              .UFORM: Unformatted disk
;              .WPROT: Write protected media, or read-only logical unit
;              .WRERR: Write error
;              .NCOMP: Incompatible disk.
;              .SEEK: Seek error.
;          B = Number of sectors actually read (in case of error only)

DEV_READ_MS:
	PUSH	BC				; SAVE SECTOR COUNT REQUEST
	; RETRIEVE AS 16BIT ONLY THE SECTOR NUMBER TO BE READ.
	EX	DE, HL
	LD	A, (HL)
	INC	HL
	LD	H, (HL)
	LD	L, A
	EX	DE, HL				; DE IS NOW SECTOR NUMBER

DEV_READ_MS_LOOP:
	CALL	DEV_READ_MS_SINGLE_SECTOR
	DJNZ	DEV_READ_MS_LOOP

	LD	A, 0
	POP	BC				; RETURN NUMBER OF READ SECTORS
	RET


; inputs:
;	HL = SOURCE OR DESTINATION MEMORY ADDRESS FOR THE TRANSFER
;	DE = SECTOR NUMBER
; outputs:
;	HL = incremented 512 - as per the copy
;	DE = sector number + 1
;	protects bc
;	SCRAMBLES DE', HL', AF', AF

DEV_READ_MS_SINGLE_SECTOR:
	PUSH	BC
	PUSH	DE				; SAVE SECTOR NUMBER
	PUSH	HL				; SAVE DEST ADDRESS

	; DIVIDE DE BY 32 (AS THERE ARE 32 SECTORS PER 16K BANK)
	PUSH	DE				; SAVE SECTOR NUMBER
	EX	DE, HL
	XOR	A
	ADD 	HL, HL
	RLA
	ADD	HL, HL
	RLA
	ADD	HL, HL
	RLA
	LD	A, H
	INC	A				; ADD ONE - AS PAGE 0 IS MSX-MUSIC ROM
	EX	DE, HL				; A CONTAINS PAGE NUMBER

	; SELECT PAGE 1
	DI
	LD	L, A
	CALL	MSX_MUSIC_SET_PAGE

	EXX
	CALL	MSX_MUSIC_SET_SLOT
	EXX

	POP	HL				; RETRIEVE SECTOR NUMBER
	LD	A, L
	AND	31				; mask for 32, 512byte sector per 16k page

	SLA	a				; multiple by 512
	LD	H, a
	LD	L, 0

	POP	DE				; RESTORE DESTINATION ADDRESS
	LD	BC, 512				; COPY SECTOR
	LDIR

	EXX
	CALL	MSX_MUSIC_RESTORE_SLOT

	LD	L, 0
	CALL	MSX_MUSIC_SET_PAGE
	EXX


	; CONVERT SECTOR NUMBER TO PAGE NUMBER IN ROM
	; CALCUL ADDRESS FOR SECTOR

	; LOAD ROM PAGE INTO PAGE 0
	; LDIR SECTOR DATA
	; RESTORE PAGE 0
	EI

	EX	DE, HL				; HL IS DESTINATION INCREMENTED
	POP	DE				; DE IS SECTOR NUMBER
	INC	DE				; DE IS NEXT SECTOR NUMBER

	POP	BC				; RESTORE BC
	RET


; SWITCH MSX-MUSIC ROM PAGE TO PAGE L
; (SWITCH PAGE 3 TO SLOT 3-1 TO ENABLE MSX-MUSIC PAGING ADDRESS)
;
; MSX-MUSIC'S ROM PAGE CAN BE SELECTED BY WRITING TO THE STANDARD MEMORY MAPPED WRITE REGISTER IN PAGE 1 OR PAGE 2
; THIS FUNCTION USES PAGE 3, TO AVOID INTERFERING WITH THE SST39SF040 WRITE COMMAND SEQUENCE
;
; L -> DESIRED MSX-MUSIC ROM PAGE
MSX_MUSIC_SET_PAGE:
	; THIS FUNCTION CAN NOT USE THE STACK WHILE PAGE 3 IS SWITCHED OUT

	IN	A, (PSL_STAT)
	LD	D, A			; STORE CURRENT SLOTS ASSIGNMENTS IN D
	OR	A, 0B11000000		; MASK PAGE 3 TO SLOT 3
	OUT	(PSL_STAT), A		; APPLY SLOT ASSIGNMENTS

	LD	A, (SSL_REGS)
	CPL
	LD	E, A			; STORE CURRENT SUB-SLOTS ASSIGNMENTS IN E
	AND	A, 0B00111111		; MASK OUT PAGE 3 SUB-SLOT
	OR	A, 0B01000000		; SET PAGE 3 TO SUB-SLOT 1
	LD	(SSL_REGS), A		; APPLY SUB-SLOT ASSIGNMENTS

	LD	A, L
	LD	(MSX_MUSIC_PAGE), A	; SET MSX-MUSIC PAGE TO DESIRED PAGE

	LD	A, E			; RESTORE SUB-SLOT ASSIGNMENTS
	LD	(SSL_REGS), A

	LD	A, D			; RESTORE SLOT ASSIGNMENTS
	OUT	(PSL_STAT), A
	RET

; SET PAGE 0 TO MSX-MUSIC SLOT (3-1)
;
; Output: H -> original slot, L -> original sub slot
;
MSX_MUSIC_SET_SLOT:
	IN	A, (PSL_STAT)
	LD	H, A			; STORE CURRENT SLOTS ASSIGNMENTS IN H
	OR	A, 0b11000011		; MASK SLOT 3 FOR PAGE 0 AND 3
	OUT	(PSL_STAT), A		; APPLY SLOT ASSIGNMENTS
	LD	D, A

	LD	A, (SSL_REGS)
	CPL
	LD	L, A			; STORE CURRENT SUB-SLOTS ASSIGNMENTS IN L
	AND	A, 0b11111100		; MASK OUT PAGE 1 SUB-SLOT
	OR	A, 0b00000001		; SET PAGE 1 TO SUB-SLOT 1
	LD	E, A
	LD	(SSL_REGS), A		; APPLY SUB-SLOT ASSIGNMENTS

	LD	A, H			; RETRIEVE ORIGINAL SLOT ASSIGNMENTS
	OR	A, 0b00000011		; KEEP PAGE 1 TO SLOT 3, AND RESTORE PAGE 3 SLOT ASSIGNMENT
	OUT	(PSL_STAT), A		; APPLY SLOT ASSIGNMENTS

					; H -> ORIGINAL SLOT, L -> ORIGINAL SUB-SLOT
	RET

; RESTORE SLOT/SUB-SLOT ASSIGNMENTS
; H -> SLOT ASSIGNEMTNS
; L -> SUB SLOT ASSIGNMENTS
;
MSX_MUSIC_RESTORE_SLOT:
	IN	A, (PSL_STAT)
	OR	A, 0b11000000		; MASK PAGE 3 TO SLOT 3
	OUT	(PSL_STAT), A		; APPLY SLOT ASSIGNMENTS

	LD	A, L			; LOAD ORIGINAL SUB-SLOT ASSIGNMENTS
	LD	(SSL_REGS), A		; RESTORE ORIGINAL SUB-SLOT ASSIGNMENTS

	LD	A, H			; LOAD ORIGINAL SLOT ASSIGNMENTS
	OUT	(PSL_STAT), A		; RESTORE ORIGINAL SLOT MAPPPINGS

	RET
