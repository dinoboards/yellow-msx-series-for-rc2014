

PROBE_HARDWARE:
	LD	DE, MSG.CPU
	CALL	PRINT
	CALL	CPU_PROBE_SPEED

	LD	DE, MSG.NEWLINE
	CALL	PRINT

	; LD	DE, MSG.SIO
	; CALL	PRINT

; 	CALL	@SIO_PROBE
; 	LD	DE, MSG.SIO_PRESENT_1
; 	CP	1
; 	JR	Z, SIO_FOUND

; 	LD	DE, MSG.SIO_PRESENT_2
; 	CP	2
; 	JR	Z, SIO_FOUND

; 	LD	DE, MSG.SIO_NOT_PRESENT
; 	JR	SIO_NOT_FOUND

; SIO_FOUND:
; 	LD	A, (RS_ESTBLS)
; 	OR	$80
; 	LD	(RS_ESTBLS), A

SIO_NOT_FOUND:
	; CALL	PRINT

	LD	DE, MSG.RTC
	CALL	PRINT

	CALL	RP5RTC_PROBE
	JR	Z, RTC_FOUND

	LD	DE, MSG.NOT
	CALL	PRINT

RTC_FOUND:
	LD	DE, MSG.PRESENT
	CALL	PRINT

	LD	DE, MSG.MUSIC
	CALL	PRINT

	CALL	MSX_MUSIC_PROBE
	JR	Z, MSX_MUSIC_NOT_FOUND

	LD	DE, MSG.NOT
	CALL	PRINT

MSX_MUSIC_NOT_FOUND:
	LD	DE, MSG.PRESENT
	CALL	PRINT

	LD	DE, MSG.GAME
	CALL	PRINT

	CALL	GAME_PROBE
	JR	Z, GAME_NOT_FOUND

	LD	DE, MSG.NOT
	CALL	PRINT

GAME_NOT_FOUND:
	LD	DE, MSG.PRESENT
	CALL	PRINT

	JP	PROBE_VDP

MSG.CPU
	DB	"CPU              ", 0

MSG.MHZ
	DB	"Mhz", 13, 10, 0

MSG.SIO
	DB	"SIO/2 Module:    ", 0

MSG.RTC
	DB	"RTC/F4 Module:   ", 0

MSG.MUSIC
	DB	"MSX MUSIC:       ", 0

MSG.GAME
	DB	"MSX GAME:        ", 0

MSG.VDP_ID
	DB	"V99", 0

MSG.VDP_FREQ
	DB	"8:           ", 0

MSG.PRESENT
	DB	"PRESENT"
MSG.NEWLINE
	DB	13, 10, 0

MSG.SIO_PRESENT_1:
	DB	"PRESENT (STD)", 13, 10, 0

MSG.SIO_PRESENT_2:
	DB	"PRESENT (ALT)", 13, 10, 0

MSG.SIO_NOT_PRESENT
	DB	"NOT PRESENT", 13, 10, 0

MSG.NOT
	DB	"NOT ", 0


; DETECT RTC HARDWARE PRESENCE
; RTC HARDWARE IS NORMALL MANAGED BY THE BIOS
; SO WE ONLY NEED TO TEST IF PRESENT.
;
RP5RTC_PROBE:
	LD	C, 00100000b
	LD	IX, REDCLK
	CALL	CALSUB
	AND	0Fh
	CP	0Ah
	RET

MSX_MUSIC_PROBE:
	CALL	MSX_MUSIC_SET_SLOT
	PUSH	HL
	LD	HL, 0x4000
	LD	DE, MSX_MARKER_1
	LD	B, 2
	CALL	TEST_MARKER
	JR	NZ, MSX_MUSIC_PROBE_1

	LD	HL, 0x401C
	LD	DE, MSX_MARKER_2
	LD	B, 4
	CALL	TEST_MARKER

MSX_MUSIC_PROBE_1:
	EX	AF, AF'
	POP	HL
	CALL	MSX_MUSIC_RESTORE_SLOT
	EX	AF, AF'
	RET

TEST_MARKER:
	LD	A, (DE)
	CP	(HL)
	RET	NZ
	INC	DE
	INC	HL
	DJNZ	TEST_MARKER
	RET


MSX_MARKER_1:
	DEFB	"AB"
MSX_MARKER_2:
	DEFB	"OPLL"

MSX_MUSIC_SET_SLOT:
	DI
	IN	A, (PSL_STAT)
	LD	H, A			; STORE CURRENT SLOTS ASSIGNMENTS IN D
	OR	11001100B		; MASK SLOT 3 FOR PAGE 1 AND 3
	OUT	(PSL_STAT), A		; APPLY SLOT ASSIGNMENTS
	LD	D, A

	LD	A, (SSL_REGS)
	CPL
	LD	L, A			; STORE CURRENT SUB-SLOTS ASSIGNMENTS IN L
	AND	11110011B		; MASK OUT PAGE 1 SUB-SLOT
	OR	00000100B		; SET PAGE 1 TO SUB-SLOT 1
	LD	E, A
	LD	(SSL_REGS), A		; APPLY SUB-SLOT ASSIGNMENTS

	LD	A, H			; RETRIEVE ORIGINAL SLOT ASSIGNMENTS
	OR	00001100B		; KEEP PAGE 2 TO SLOT 3
	OUT	(PSL_STAT), A		; APPLY SLOT ASSIGNMENTS

					; H -> ORIGINAL SLOT, L -> ORIGINAL SUB-SLOT
	EI
	RET

MSX_MUSIC_RESTORE_SLOT:
	DI
	IN	A, (PSL_STAT)
	OR	11000000B		; MASK PAGE 3 TO SLOT 3
	OUT	(PSL_STAT), A		; APPLY SLOT ASSIGNMENTS

	LD	A, L			; LOAD ORIGINAL SUB-SLOT ASSIGNMENTS
	LD	(SSL_REGS), A		; RESTORE ORIGINAL SUB-SLOT ASSIGNMENTS

	LD	A, H			; LOAD ORIGINAL SLOT ASSIGNMENTS
	OUT	(PSL_STAT), A		; RESTORE ORIGINAL SLOT MAPPPINGS

	EI
	RET

AY_RSEL		EQU	$A0
AY_RDAT		EQU	$A1
AY_RIN		EQU	$A2

GAME_PROBE:
	DI
	LD	A, 2			; SELECT REG 2 FOR WRITING
	OUT	(AY_RSEL), A
	LD	A, $55			; WRITE $55
	OUT	(AY_RDAT), A

	LD	A, 2			; RE-SELECT REG 2 FOR READING
	OUT	(AY_RSEL), A		; WANT TO READ
	IN	A, (AY_RIN)		; READ SELECTED REGISTER
	CP	$55
	EI
	RET

; Basic ROM version
; 7 6 5 4 3 2 1 0
; | | | | +-+-+-+-- Character set
; | | | |           0 = Japanese, 1 = International (ASCII), 2=Korean
; | +-+-+---------- Date format
; |                 0 = Y-M-D, 1 = M-D-Y, 2 = D-M-Y
; +---------------- Default interrupt frequency
;                   0 = 60Hz, 1 = 50Hz
IDBYT1	EQU	$002B

CPU_PROBE_SPEED:
	LD	DE, 0
	LD	HL, JIFFY

CPU_PROBE_1:
	EI
	HALT	;// WAIT FOR HOPEFULLY A VDP INT
	LD	A, (HL)

CPU_PROBE_2:			; 25T States, 3M
	INC	DE		; 6T, 1M
	CP	(HL)		; 7T, 1M
	JR	Z, CPU_PROBE_2	; 12T, 1M

	ld	C, 6
	LD	A, (IDBYT1)
	AND	$80
	JR	Z, CPU_PROBE_3

	LD	C, 5
CPU_PROBE_3
	CALL	DE_MULT_C
	LD	A, H

	LD	DE, MSG.SPD_3_5_MHZ_M1
	CP	$34
	JP	C, PRINT

	LD	DE, MSG.SPD_3_5_MHZ
	CP	$50
	JP	C, PRINT

	LD	DE, MSG.SPD_7_4_MHZ_M1
	CP	$70
	JP	C, PRINT

	LD	DE, MSG.SPD_7_4_MHZ
	CP	$A0
	JP	C, PRINT

	LD	DE, MSG.SPD_20_MHZ_3_WAIT
	CP	$D0
	JP	C, PRINT

	LD	DE, MSG.SPD_20_MHZ_1_WAIT
	JP	PRINT

MSG.SPD_3_5_MHZ_M1:
	DB	"3.5Mhz (M1)", 0

MSG.SPD_3_5_MHZ:
	DB	"3.5Mhz", 0

MSG.SPD_7_4_MHZ_M1:
	DB	"7.4Mhz (M1)", 0

MSG.SPD_7_4_MHZ:
	DB	"7.4Mhz", 0

MSG.SPD_20_MHZ_3_WAIT:
	DB	"20Mhz (3 WAIT)", 0

MSG.SPD_20_MHZ_1_WAIT:
	DB	"20Mhz (1 WAIT)", 0


PROBE_VDP:
	LD	DE, MSG.VDP_ID
	CALL	PRINT

	LD	A, 1				// READ STATUS REGISTE
	DI					// 1 STATE
	OUT	(VDP_ADDR), A
	LD	A, 0x80 | 15
	OUT	(VDP_ADDR), A
	IN	A, (VDP_ADDR)
	EX 	AF, AF'
	XOR	A
	OUT	(VDP_ADDR), A
	LD	A, 0x80 | 15
	EI
	OUT	(VDP_ADDR), A
	EX	AF, AF'

	AND	0x04				// BIT 2 SET => V9958
	LD	A, '3'
	JR	Z, VDP_9938			// IF NOT SET => V9938

	LD	A, '5'
VDP_9938:
	BIOS_FN	CHPUT

VDP_FREQ:
	LD	DE, MSG.VDP_FREQ
	CALL	PRINT

	LD	DE, MSG.60HZ
	LD	A, (IDBYT1)
	AND	$80
	JP	Z, PRINT

	LD	DE, MSG.50HZ
	JP	PRINT

MSG.50HZ:
	DB	"50Hz", 13, 10, 0

MSG.60HZ:
	DB	"60Hz", 13, 10, 0
